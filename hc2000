#!/usr/bin/env python

import argparse
import os
import os.path
import sys
import yaml
import hc2002.aws.ec2
import hc2002.config
import hc2002.plugin
import hc2002.plugin.default
import hc2002.resource.instance
import hc2002.resource.role

def _load_definition(filename):
    try:
        with open(filename) as f:
            sys.stdout.write('Loading %s...' % filename)
            sys.stdout.flush()

            definition = yaml.safe_load(f)

        sys.stdout.write(' [ OK ]\n')
        return definition

    except IOError as err:
        pass

def _merge_definition(definition, new):
    if new is not None:
        definition.update(new)

def load_instance_definition(config):
    instance = {}
    for path in config.instance_path:
        path = path.format(region=config.region)
        _merge_definition(instance,
                _load_definition(os.path.join(path, '~default~')))
        _merge_definition(instance,
                _load_definition(os.path.join(path, config.instance)))
    return instance

class BootstrapActor:
    def __call__(self, config):
        self.config = config
        self.common_definitions = {}

        self.ec2 = hc2002.aws.ec2.get_connection()

        self.create_key()
        self.create_default_security_group()

        self.write_common_configuration()

    def _get_path(self, path):
        path = path.format(region=self.config.region)
        return os.path.join(self.config.path, path)

    def create_key(self):
        identities = self._get_path('identities')
        if not os.path.isdir(identities):
            os.makedirs(identities, 0700)

        key = self.ec2.get_key_pair(self.config.key)
        if key is None:
            key = self.ec2.create_key_pair(self.config.key)
            key.save(self._get_path('identities'))
            print 'Identity file for %s key saved in %s' \
                    % (self.config.key, identities)
        else:
            print 'Key %s already exists.' % self.config.key

        self.common_definitions['key:default'] = self.config.key

    def create_default_security_group(self):
        groups = self.ec2.get_all_security_groups(
                # Specifying group name as a filter avoids an exception being
                # thrown when the group doesn't exist
                filters={ 'group-name': self.config.security_group })
        if len(groups) == 0:
            print self.ec2.create_security_group(self.config.security_group,
                    'Default security group set up by hc2000 bootstrap. This '
                    'allows incoming SSH connections into instances.')
            if not self.ec2.authorize_security_group(
                    self.config.security_group, ip_protocol='tcp',
                    from_port=22, to_port=22, cidr_ip='0.0.0.0/0'):
                sys.stderr.write('Failed to open SSH port for incoming '
                        'connections security group!\n')
        else:
            print 'Security group %s already exists.' \
                    % self.config.security_group

        self.common_definitions['security-groups:default'] = \
                self.config.security_group

    def write_common_configuration(self):
        with open(self._get_path('~default~'), 'wb') as f:
            f.write(yaml.dump(self.common_definitions,
                default_flow_style=False))

def create_role_action(config):
    role = _load_definition(config.role)
    hc2002.resource.role.create(role)

def launch_action(config):
    instance = load_instance_definition(config)

    def command_line_override(option, key):
        if hasattr(config, option):
            instance[key] = getattr(config, option)

    command_line_override('client_token', 'client-token')
    command_line_override('instance_count', 'count')
    command_line_override('subnet', 'subnet')
    command_line_override('availability_zone', 'availability-zone')

    hc2002.plugin.apply_for_resource(hc2002.resource.instance, instance)
    print hc2002.resource.instance.launch(instance)

def parse_args(args=None, namespace=None):
    parser = argparse.ArgumentParser(fromfile_prefix_chars='@')

    parser.add_argument('-O', '--aws-access-key', metavar='<key>',
            help='AWS Access Key ID. Defaults to AWS_ACCESS_KEY environment '
            'variable, if set.')
    parser.add_argument('-W', '--aws-secret-key', metavar='<secret>',
            help='AWS Secret Access Key. Defaults to AWS_SECRET_KEY '
            'environment variable, if set.')

    region_required = not hasattr(namespace, 'region') or not namespace.region
    parser.add_argument('--region', metavar='<region>',
            required=region_required, help='AWS EC2 Region. Defaults to '
            'EC2_REGION environment variable, if set.')

    parser.add_argument('--instance-path', metavar='<path>', action='append',
            help='Append path to list of instance definition search paths. If '
            'no path is specified on the command line definitions are loaded '
            'from the current directory.')
    parser.add_argument('--puppet-path', metavar='<path>', action='append',
            help='Append path to list of puppet manifest search paths. If no '
            'path is specified on the command line puppet manifests are '
            'loaded from the current directory.')

    actions = parser.add_subparsers(title='actions')

    bootstrap = actions.add_parser('bootstrap', description='Set up SSH key '
            'and default security group.')
    bootstrap.add_argument('-k', '--key', default='hc2000', help='Name of the '
            'key pair to be created.')
    bootstrap.add_argument('--security-group', default='hc2000-ssh',
            help='Name of the default security group that will be created. '
            'This group allows incoming SSH connections, by default.')
    bootstrap.add_argument('path', default='', nargs='?', help='Path to '
            'populate with default setup. Defaults to current directory')
    bootstrap.set_defaults(actor=BootstrapActor())

    launch = actions.add_parser('launch', argument_default=argparse.SUPPRESS,
            description='Launch isolated instances, spot instances and '
            'auto-scaling groups.')
    launch.add_argument('--client-token', metavar='<token>',
            help='User-defined token identifying the request. Use to ensure '
            'idempotent requests.')
    launch.add_argument('-n', '--instance-count', metavar='<count>',
            help='Number of instances to launch. Overrides \'count\' '
            'attribute in instance definition.')
    launch.add_argument('-s', '--subnet', metavar='<subnet>',
            help='Subnet identifier for started instances. Overrides '
            '\'subnet\' attribute in instance definition.')
    launch.add_argument('-z', '--availability-zone', metavar='<zone>',
            help='Availability zone for started instances. Overrides '
            '\'availability-zone\' attribute in instance definition.')
    launch.add_argument('instance', help='Path to instance definition file.')
    launch.set_defaults(actor=launch_action)

    create_role = actions.add_parser('create-role',
            description='Creates an IAM role with specified policies, and an '
            'associated instance-profile, that can be used when launching '
            'instances.')
    create_role.add_argument('role', help='Path to role definition file.')
    create_role.set_defaults(actor=create_role_action)

    return parser.parse_args(args, namespace)

def set_default_config(config):
    if config.instance_path is None:
        config.instance_path = [ '.' ]
    if config.puppet_path is None:
        config.puppet_path = [ '.' ]

if __name__ == '__main__':
    config = parse_args(namespace=hc2002.config)
    set_default_config(config)
    config.actor(config)
